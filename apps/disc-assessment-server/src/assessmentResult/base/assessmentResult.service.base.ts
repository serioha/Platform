/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AssessmentResult as PrismaAssessmentResult,
  Report as PrismaReport,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class AssessmentResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssessmentResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assessmentResult.count(args);
  }

  async assessmentResults(
    args: Prisma.AssessmentResultFindManyArgs
  ): Promise<PrismaAssessmentResult[]> {
    return this.prisma.assessmentResult.findMany(args);
  }
  async assessmentResult(
    args: Prisma.AssessmentResultFindUniqueArgs
  ): Promise<PrismaAssessmentResult | null> {
    return this.prisma.assessmentResult.findUnique(args);
  }
  async createAssessmentResult(
    args: Prisma.AssessmentResultCreateArgs
  ): Promise<PrismaAssessmentResult> {
    return this.prisma.assessmentResult.create(args);
  }
  async updateAssessmentResult(
    args: Prisma.AssessmentResultUpdateArgs
  ): Promise<PrismaAssessmentResult> {
    return this.prisma.assessmentResult.update(args);
  }
  async deleteAssessmentResult(
    args: Prisma.AssessmentResultDeleteArgs
  ): Promise<PrismaAssessmentResult> {
    return this.prisma.assessmentResult.delete(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.assessmentResult
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.assessmentResult
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
