/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AssessmentResultService } from "../assessmentResult.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AssessmentResultCreateInput } from "./AssessmentResultCreateInput";
import { AssessmentResult } from "./AssessmentResult";
import { AssessmentResultFindManyArgs } from "./AssessmentResultFindManyArgs";
import { AssessmentResultWhereUniqueInput } from "./AssessmentResultWhereUniqueInput";
import { AssessmentResultUpdateInput } from "./AssessmentResultUpdateInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AssessmentResultControllerBase {
  constructor(
    protected readonly service: AssessmentResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssessmentResult })
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAssessmentResult(
    @common.Body() data: AssessmentResultCreateInput
  ): Promise<AssessmentResult> {
    return await this.service.createAssessmentResult({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        summary: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AssessmentResult] })
  @ApiNestedQuery(AssessmentResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assessmentResults(
    @common.Req() request: Request
  ): Promise<AssessmentResult[]> {
    const args = plainToClass(AssessmentResultFindManyArgs, request.query);
    return this.service.assessmentResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        summary: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssessmentResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assessmentResult(
    @common.Param() params: AssessmentResultWhereUniqueInput
  ): Promise<AssessmentResult | null> {
    const result = await this.service.assessmentResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        summary: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssessmentResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAssessmentResult(
    @common.Param() params: AssessmentResultWhereUniqueInput,
    @common.Body() data: AssessmentResultUpdateInput
  ): Promise<AssessmentResult | null> {
    try {
      return await this.service.updateAssessmentResult({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          summary: true,

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssessmentResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAssessmentResult(
    @common.Param() params: AssessmentResultWhereUniqueInput
  ): Promise<AssessmentResult | null> {
    try {
      return await this.service.deleteAssessmentResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          summary: true,

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: AssessmentResultWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filePath: true,

        assessmentResult: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "update",
    possession: "any",
  })
  async connectReports(
    @common.Param() params: AssessmentResultWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateAssessmentResult({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "update",
    possession: "any",
  })
  async updateReports(
    @common.Param() params: AssessmentResultWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateAssessmentResult({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "update",
    possession: "any",
  })
  async disconnectReports(
    @common.Param() params: AssessmentResultWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateAssessmentResult({
      where: params,
      data,
      select: { id: true },
    });
  }
}
