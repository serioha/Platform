/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssessmentResult } from "./AssessmentResult";
import { AssessmentResultCountArgs } from "./AssessmentResultCountArgs";
import { AssessmentResultFindManyArgs } from "./AssessmentResultFindManyArgs";
import { AssessmentResultFindUniqueArgs } from "./AssessmentResultFindUniqueArgs";
import { CreateAssessmentResultArgs } from "./CreateAssessmentResultArgs";
import { UpdateAssessmentResultArgs } from "./UpdateAssessmentResultArgs";
import { DeleteAssessmentResultArgs } from "./DeleteAssessmentResultArgs";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { Customer } from "../../customer/base/Customer";
import { AssessmentResultService } from "../assessmentResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssessmentResult)
export class AssessmentResultResolverBase {
  constructor(
    protected readonly service: AssessmentResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "read",
    possession: "any",
  })
  async _assessmentResultsMeta(
    @graphql.Args() args: AssessmentResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssessmentResult])
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "read",
    possession: "any",
  })
  async assessmentResults(
    @graphql.Args() args: AssessmentResultFindManyArgs
  ): Promise<AssessmentResult[]> {
    return this.service.assessmentResults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssessmentResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "read",
    possession: "own",
  })
  async assessmentResult(
    @graphql.Args() args: AssessmentResultFindUniqueArgs
  ): Promise<AssessmentResult | null> {
    const result = await this.service.assessmentResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssessmentResult)
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "create",
    possession: "any",
  })
  async createAssessmentResult(
    @graphql.Args() args: CreateAssessmentResultArgs
  ): Promise<AssessmentResult> {
    return await this.service.createAssessmentResult({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssessmentResult)
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "update",
    possession: "any",
  })
  async updateAssessmentResult(
    @graphql.Args() args: UpdateAssessmentResultArgs
  ): Promise<AssessmentResult | null> {
    try {
      return await this.service.updateAssessmentResult({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssessmentResult)
  @nestAccessControl.UseRoles({
    resource: "AssessmentResult",
    action: "delete",
    possession: "any",
  })
  async deleteAssessmentResult(
    @graphql.Args() args: DeleteAssessmentResultArgs
  ): Promise<AssessmentResult | null> {
    try {
      return await this.service.deleteAssessmentResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Report], { name: "reports" })
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @graphql.Parent() parent: AssessmentResult,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: AssessmentResult
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
