/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Answer as PrismaAnswer,
  Question as PrismaQuestion,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class AnswerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AnswerCountArgs, "select">): Promise<number> {
    return this.prisma.answer.count(args);
  }

  async answers(args: Prisma.AnswerFindManyArgs): Promise<PrismaAnswer[]> {
    return this.prisma.answer.findMany(args);
  }
  async answer(
    args: Prisma.AnswerFindUniqueArgs
  ): Promise<PrismaAnswer | null> {
    return this.prisma.answer.findUnique(args);
  }
  async createAnswer(args: Prisma.AnswerCreateArgs): Promise<PrismaAnswer> {
    return this.prisma.answer.create(args);
  }
  async updateAnswer(args: Prisma.AnswerUpdateArgs): Promise<PrismaAnswer> {
    return this.prisma.answer.update(args);
  }
  async deleteAnswer(args: Prisma.AnswerDeleteArgs): Promise<PrismaAnswer> {
    return this.prisma.answer.delete(args);
  }

  async getQuestion(parentId: string): Promise<PrismaQuestion | null> {
    return this.prisma.answer
      .findUnique({
        where: { id: parentId },
      })
      .question();
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.answer
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
